/*[PATH @digikala/supernova-digikala-marketplace/assets/local/js/tableView.js]*/
window.TableView = {
    init: function () {
        this.tableDefaultEmpty = false;
        this.searchFormDefaultArray = [];
        this.searchFormArray = [];
        this.searchFormSubmitted = false;
        this.staticFormData = [];
        this.initStaticFormData();
        this.initPrepareSearchRadioGroup();
        this.initSearchForm();
        this.initDataSetTable();
        this.initExpandTables();

        if (this.isNewUI()) {
            this.initSelect2();
        }

        this.initOnEndEvent();
    },

    serializeForm: function () {
        let $form = $('#searchForm');
        let $formArray = $form.serializeArray();
        let $formArrayFixed = {};
        for (let i = 0; i < $formArray.length; i++) {
            $formArrayFixed[$formArray[i]['name']] = $formArray[i]['value'];
        }
        return $formArrayFixed;
    },

    initSearchForm: function () {
        const $that = this;
        const $form = $('#searchForm');
        const $submitBtn = $('#submitButton');
        const $typeSelect = $('.js-select-type');
        const $statusSelect = $('.js-select-status');

        if (!$form.length) {
            return;
        }

        $that.searchFormArray = $that.serializeForm();
        $that.searchFormDefaultArray = $that.serializeForm();

        $('.js-persian-date-picker').persianDatepicker({
            initialValue: false,
            autoClose: true,
            format: 'YYYY/MM/DD'
        });

        // To manually configure date picker for the page
        if ($('.js-order-history-search-input').length) {
            $('.js-persian-date-picker').persianDatepicker({
                initialValue: false,
                autoClose: true,
                format: 'YYYY/MM/DD',
                observer: true,
                onSelect: function () {
                    $(this.model.inputElement).trigger('change');
                },
            });
        }

        $submitBtn.click(function () {
            if ($that.tableDefaultEmpty) {
                return false;
            }

            let $currentFormArray = $that.serializeForm();
            if (JSON.stringify($that.searchFormArray) === JSON.stringify($currentFormArray) && !window.canSearchWithNoChange) {
                return false;
            }

            $that.searchFormArray = $currentFormArray;
            $that.searchFormSubmitted = true;
            $that.search(1, $that.getItemsPerPage());

            // return false;
        });

        $form.on('submit', function (e) {
            e.preventDefault();
            $submitBtn.click();
        });


        if ($typeSelect.length) {
            $typeSelect.on('change', function (e) {
                e.preventDefault();
                $submitBtn.click()
            });
        }

        if ($statusSelect.length) {
            $statusSelect.on('change', function (e) {
                e.preventDefault()
                $submitBtn.click();
            })


        }

        $(document).on('click', '#export-button', function () {
            $that.requestExport($that.serializeForm(), $that.staticFormData);
            return false;
        });

        $('#export-invoice-button').click(function () {
            if ($that.tableDefaultEmpty) {
                return false;
            }

            let $currentFormArray = $that.serializeForm();
            if (JSON.stringify($that.searchFormArray) === JSON.stringify($currentFormArray)) {
                return false;
            }

            //TODO STUPID
            $that.searchFormArray = $currentFormArray;
            window.Services.ajaxPOSTRequestHTML(
                '/sellerinvoice/printinvoices/',
                $that.searchFormArray,
                function (response) {
                    if (response) {
                        window.open('/sellerinvoice/printinvoices/?order_created_at_from=' + $that.searchFormArray['search[order_created_at_from]']);
                    }
                }
            );

            return false;
        });

        $('#resetButton').click(function () {
            if ($that.tableDefaultEmpty) {
                return false;
            }

            const $productVariantAjax = $('.js-select2, .js-product-variant-ajax');
            if (!$that.searchFormSubmitted) {
                let $currentFormArray = $that.serializeForm();
                if (JSON.stringify($that.searchFormDefaultArray) === JSON.stringify($currentFormArray)) {
                    return false;
                }

                $form[0].reset();
                $productVariantAjax.val('').trigger('change');

                return false;
            }

            $form[0].reset();
            $productVariantAjax.val('').trigger('change');

            $that.searchFormArray = $that.serializeForm();
            $that.searchFormSubmitted = false;
            $that.search(1, $that.getItemsPerPage());

            return false;
        });
    },

    initDataSetTable: function () {
        const $searchTable = $('.js-search-table');

        if (!$searchTable.length) {
            return;
        }

        const $that = this;

        $(document).on('click', '.js-search-table-column-sortable', function () {
            $that.search($that.getCurrentPage(), $that.getItemsPerPage(), $(this).data('sort-column'), $(this).data('sort-order'));
        });

        $(document).on('click', '.js-search-pager a', function () {
            const $page = $(this).data('page');
            if ($page === $that.getCurrentPage()) {
                return;
            }

            const $searchUpdatedTable = $('.js-search-table');

            $that.search($page, $that.getItemsPerPage(), $searchUpdatedTable.data('sort-column'), $searchUpdatedTable.data('sort-order'));
        });

        $(document).on('change', '.js-search-items-per-page', function () {
            $that.search(1, $(this).val());
        });

        if (this.isNewUI) {
            if (this.isHeaderFloating()) {
                this.fixTableHeader();
            }

            if (this.hasCheckboxes()) {
                this.initRowSelection();
            }

            if (this.hasTooltips()) {
                this.initTooltips();
            }
        }

        if ($that.reloadInSeconds()) {
            setInterval(
                function () {
                    window.location.reload();
                },
                $that.reloadInSeconds() * 1000
            );
        }
    },

    initStaticFormData: function () {
        let $that = this;

        $('.js-static-form-data').each(function () {
            $that.staticFormData[$(this).attr('name')] = $(this).val();
        });
    },

    getCurrentPage: function () {
        let $aPage = $('ul.js-search-pager li.uk-active:first a');
        let $page;

        if ($aPage !== 'undefined' && ($page = $aPage.data('page'))) {
            return $page;
        }

        return 1
    },

    getSearchUrl: function (selector) {
        selector = selector || '.js-search-table';
        return $(selector).data('search-url');
    },

    getExportUrl: function () {
        return $('.js-search-table').data('export-url');
    },

    getItemsPerPage: function () {
        return $('.js-search-items-per-page:first').val();
    },

    isNewUI: function () {
        return $('.js-search-table').data('new-ui');
    },

    isHeaderFloating: function (tableSelector) {
        tableSelector = tableSelector || '.js-search-table';

        let $table = $(tableSelector);
        if (!isTable($table)) {
            $table = $table.find('table');
        }
        if ($table.length == 0 || !isTable($table)) {
            return;
        }
        return $table.data('is-header-floating');

        function isTable($el) {
            return $el[0].tagName === 'TABLE';
        }
    },

    hasCheckboxes: function (tableSelector) {
        tableSelector = tableSelector || '.js-search-table';

        let $table = $(tableSelector);
        if (!isTable($table)) {
            $table = $table.find('table');
        }
        if ($table.length == 0 || !isTable($table)) {
            return;
        }
        return $('.js-search-table').data('has-checkboxes');

        function isTable($el) {
            return $el[0].tagName === 'TABLE';
        }
    },

    hasTooltips: function () {
        return $('.c-ui-table__tooltip').length > 0;
    },

    reloadInSeconds: function () {
        return $('.js-search-table').data('auto-reload-seconds');
    },

    initExpandTables: function () {
        const $this = this;
        const tables = document.querySelectorAll('.c-ui-table');
        if (!tables) {
            return;
        }

        for (let i = 0, len = tables.length; i < len; i++) {
            $this.initTable(tables[i]);
        }
    },

    initTable: function (table) {
        let tableHeight = {value: null};

        if (table.classList.contains('js-table-expandable')) {
            this.expandTable(table, tableHeight);
        }
    },

    expandTable: function (table, tableHeight) {
        const tableClasses = {
            expander: 'c-ui-table__expander',
            togglerActive: 'c-ui-table__expander-control--expanded',
            hiddenRow: 'c-ui-table__expand-row--hidden',
        };
        let controls;
        let expandebles;
        let allToggle;
        const rowControls = table.querySelectorAll('tbody .' + tableClasses.expander);

        if (rowControls) {
            controls = [];
            expandebles = [];

            for (let i = 0, len = rowControls.length; i < len; i++) {
                rowControl(rowControls[i], controls, expandebles);
            }

            const allControl = table
                .querySelector('thead .' + tableClasses.expander);
            if (!allControl || !controls.length) {
                return;
            }

            allToggle = allControl.querySelector('.' + tableClasses.expander + '-control');
            if (!allToggle) {
                return;
            }

            allToggle.isExpanded = isExpanded(controls);
            controlClass(allToggle.classList, tableClasses.togglerActive, allToggle.isExpanded);
            toggleRowClass(allToggle.classList, allToggle.isExpanded);

            allToggle.addEventListener('click', function () {
                const expanded = !this.isExpanded;

                this.isExpanded = expanded;
                controlClass(this.classList, tableClasses.togglerActive, expanded);

                for (let i = 0, len = controls.length; i < len; i++) {
                    triggerControls(controls[i]);
                }

                toggleTargetRowsClass(expandebles, expanded);

                function triggerControls(control) {
                    control.isExpanded = expanded;
                    controlClass(control.classList, tableClasses.togglerActive, expanded);
                }
            });
        }

        function rowControl(control) {
            const toggler = control.querySelector('.' + tableClasses.expander + '-control');
            let expandableRows;

            if (toggler) {
                toggler.isExpanded = false;
                controlClass(toggler.classList, tableClasses.togglerActive, toggler.isExpanded);
                controls.push(toggler);

                const targetId = control.dataset.expand;
                if (!targetId) {
                    return;
                }

                expandableRows = table.querySelectorAll('[data-expand-target="' + targetId + '"]');
                if (!expandableRows) {
                    return;
                }

                for (let i = 0, len = expandableRows.length; i < len; i++) {
                    expandebles.push(expandableRows[i]);
                }

                toggler.addEventListener('click', toggleExpandableRows);
            }

            function toggleExpandableRows() {
                const controlExpanded = !this.isExpanded;
                this.isExpanded = controlExpanded;

                controlClass(this.classList, tableClasses.togglerActive, controlExpanded);
                toggleTargetRowsClass(expandableRows, controlExpanded);

                if (allToggle) {
                    const allExpanded = isExpanded(controls);
                    controlClass(
                        allToggle.classList,
                        tableClasses.togglerActive,
                        allExpanded
                    );
                    allToggle.isExpanded = allExpanded;
                }
            }

        }


        function controlClass(nodeClassList, className, expand) {
            nodeClassList[expand ? 'add' : 'remove'](className);
        }

        function isExpanded(arrOfNodes) {
            return arrOfNodes.some(checkExpand);
        }

        function checkExpand(node) {
            return node.isExpanded;
        }

        function toggleTargetRowsClass(nodes, show) {
            for (let i = 0, len = nodes.length; i < len; i++) {
                toggleRowClass(nodes[i].classList, show);
            }
            tableHeight.value = table.offsetHeight;
        }

        function toggleRowClass(nodeClassList, show) {
            nodeClassList[show ? 'remove' : 'add'](tableClasses.hiddenRow);
        }
    },

    search: function ($page, $itemsPerPage, $sortColumn, $sortOrder, $urlSelector, $containerSelector) {
        const $that = this;

        $containerSelector = $containerSelector || '.js-table-container';
        $($containerSelector + ' .c-loading').removeClass('c-loading--hidden');
        $($containerSelector + ' .c-card__loading').addClass('is-active');

        Services.showLoader = function () {
        };
        Services.hideLoader = function () {
        };
        let params = {};
        (new URL(location.href))
            .searchParams
            .forEach(function (v, k) {
                params[k] = v
            });
        let $loader = $('#pageLoader');
        if ($loader.length) {
            $('#pageLoader').addClass('c-content-loading');
            $('html').addClass('c-loader-overflow');
        }

        window.Services.ajaxPOSTRequestHTML(
            $that.getSearchUrl($urlSelector),
            $.extend(
                {
                    sortColumn: $sortColumn,
                    sortOrder: $sortOrder,
                    items: $itemsPerPage,
                    page: $page,
                    params: params
                },
                $that.searchFormArray,
                $that.staticFormData
            ),
            function (data) {
                $containerSelector = $containerSelector || '.js-table-container';
                $($containerSelector).replaceWith(data);
                window.ga('send', 'pageview');
                if ($that.isNewUI()) {
                    $that.initSelect2($containerSelector);

                    if ($that.isHeaderFloating($containerSelector)) {
                        $that.fixTableHeader($containerSelector);
                    }

                    if ($that.hasCheckboxes()) {
                        $that.initRowSelection();
                    }
                }

                const tables = document.querySelectorAll('.c-ui-table');
                if (!tables) {
                    return;
                }

                for (let i = 0, len = tables.length; i < len; i++) {
                    $that.initTable(tables[i]);
                }

                $($containerSelector).trigger('onSearchFinished');

                if ($loader.length) {
                    $('#pageLoader').removeClass('c-content-loading');
                    $('html').removeClass('c-loader-overflow');
                    Services.commonSelect2();
                }

                var $expandBtn = $('.js-expand-comment'),
                    $expandRow = $('.js-expanded-row');
                if ($expandBtn.length && $expandRow.length) {
                    $expandBtn.on('click', function () {
                        // toggle class of expand button parent row
                        $(this).parents('tr').toggleClass('c-profile-rating__expanded-product-row');

                        var expandeData = $(this).parent('td').data('expand'),
                            expandedRow = $(this).parents('tr').next();

                        $(this).toggleClass('c-ui-table__expander-control--expanded');
                        expandedRow.toggleClass('c-ui-table__expand-row--hidden');
                    });
                }
            },
            false,
            true
        );
    },

    requestExport: function ($searchFormArray, $staticFormData, $sortColumn, $sortOrder, $url) {
        $url = $url || this.getExportUrl();
        window.Services.ajaxPOSTRequestJSON(
            $url,
            $.extend(
                {
                    sortColumn: $sortColumn,
                    sortOrder: $sortOrder
                },
                $searchFormArray,
                $staticFormData
            ),
            function (data) {
                window.UIkit.modal.alert("<div class='modal-confirm'><span class='modal-confirm-icon' uk-icon='icon: warning; ratio: 5'></span> <h2></h2></div> " + data, {
                    labels: {
                        'ok': 'تایید'
                    }
                });
                $('.modal-confirm').parent().siblings('.uk-modal-footer').removeClass('uk-text-right').addClass('uk-text-center').css('border', 'none');
            },
            false,
            true
        );
    },

    initSelect2: function (containerSelector) {
        const $selects = containerSelector
            ? $(containerSelector).find('.js-search-items-per-page, .c-ui-select--common')
            : $('.js-search-items-per-page, .c-ui-select--common');

        if ($selects.length) {
            for (let i = 0, len = $selects.length; i < len; i++) {
                const $select = $($selects[i]);
                // const $dropdown = $select.siblings('.js-select-options').length > 0 && $select.siblings('.js-select-options') || null;
                $select.select2({
                    placeholder: $select.attr('placeholder'),
                    dropdownParent: null,
                    minimumResultsForSearch: $select.hasClass('c-ui-select--search') ? 0 : Infinity,
                    language: window.Services.selectSearchLanguage
                }).data('select2').$dropdown.addClass('c-ui-select__dropdown c-ui-select__dropdown--gap');

            }
        }
    },

    fixTableHeader: function (containerSelector) {
        containerSelector = containerSelector || '.js-table-container';

        const container = document.querySelector(containerSelector);
        const tables = container.querySelectorAll('.js-search-table');
        let navbarHeight;
        let posY;

        tables.forEach(function initTable(table) {
            let transformed;
            let ticker;

            const headerRow = table.querySelector('thead .c-ui-table__row');
            if (!headerRow) {
                return;
            }

            const headers = headerRow.querySelectorAll('.c-ui-table__header');
            if (headers) {
                if (!navbarHeight) {
                    const nav = document.querySelector('.js-header-nav');
                    navbarHeight = nav ? nav.clientHeight : 0;
                }
                posY = posY || window.scrollY;
                transformed = false;
                ticker = false;

                window.addEventListener('scroll', fixTableHeader);
            }

            function fixTableHeader() {
                posY = window.scrollY;
                if (!ticker) {
                    window.requestAnimationFrame(animateHeader);
                    ticker = true;
                }
            }

            function animateHeader() {
                setHeaderPosition();
                ticker = false;
            }

            function setHeaderPosition() {
                const MIN_POSITION = 300;
                const scrolled = posY;
                const tablePositionY = offsetTop(table, scrolled);
                const fromTop = navbarHeight + scrolled;
                const minShift = tablePositionY + table.scrollHeight - MIN_POSITION;

                if (fromTop > minShift) {
                    return;
                }
                if (fromTop >= tablePositionY) {
                    const translateY = Math.floor(fromTop - tablePositionY);
                    const transformValue = 'transform: translate3d(0, ' + translateY + 'px, 0);';

                    assignTransformToElements(headers, transformValue);
                    transformed = true;
                } else if (transformed) {
                    const transformValue = 'transform: none;';

                    assignTransformToElements(headers, transformValue);
                    transformed = false;
                }
            }
        });

        function assignTransformToElements(nodes, style) {
            for (let i = 0, length = nodes.length; i < length; i++) {
                nodes[i].style = style;
            }
        }

        function offsetTop(node, shiftY) {
            return node.getBoundingClientRect().top + shiftY;
        }
    },

    initTooltips: function () {
        $(document).on('mouseenter', '.c-ui-table__info', function () {
            const $info = $(this);
            const $tooltip = $info.find('.c-ui-table__tooltip');
            const $wrapper = $tooltip.closest('.c-ui-table');
            let $visibleTooltip = null;

            $tooltip.show();
            const style = {
                top: $tooltip.offset().top,
                left: $tooltip.offset().left,
                height: $tooltip.innerHeight(),
                display: 'block',
            };
            $visibleTooltip = $tooltip.clone().css(style).appendTo('body');
            $tooltip.removeAttr("style");

            $wrapper.on('scroll', detectScroll);
            $(document).on('scroll', detectScroll);
            $info.on('mouseleave', detectScroll);

            function detectScroll() {
                if (!$visibleTooltip) {
                    return;
                }

                /** @var $visibleTooltip.remove() */
                $visibleTooltip.remove();
                $wrapper.off('scroll', detectScroll);
                $(document).off('scroll', detectScroll);
            }
        });
    },

    initRowSelection: function (containerSelector) {
        containerSelector = containerSelector || '.c-ui-table';
        const checkboxesSelector = containerSelector + ' .c-ui-checkbox__origin';
        const $rowCheckboxes = $(checkboxesSelector);

        if (!($rowCheckboxes.length > 1)) {
            return;
        }

        $(document).on('change', checkboxesSelector, function () {
            const $toggledCheckbox = $(this);
            const $table = $toggledCheckbox.closest('.c-ui-table');
            const $checkboxes = $table.find('input:checkbox');
            let enabledCreateBtn = false;
            let isAllChecked = true;

            if ($checkboxes[0] === this) {
                enabledCreateBtn = this.checked;

                for (let i = 1, len = $checkboxes.length; i < len; i++) {
                    $checkboxes[i].checked = enabledCreateBtn;
                    setSelectedRow($checkboxes[i], enabledCreateBtn);
                }
            } else {
                for (let i = 1, len = $checkboxes.length; i < len; i++) {
                    if (!$checkboxes[i].checked) {
                        isAllChecked = false;
                        break;
                    }
                }
                $checkboxes[0].checked = isAllChecked;
                setSelectedRow(this, this.checked);
            }
        });

        let $variants = $('[name="selected-variants"]');

        if ($variants.length <= 0) {
            $variants = $('[name="search[selected-variants]"]');
        }

        if ($variants.length > 0) {
            let selectedVariants = $variants.val();

            if (selectedVariants.length > 0) {
                let activateCreateButton = false;

                selectedVariants = selectedVariants.split(',');

                const $orders = $('[name="add-to-order"]');
                if ($orders.length > 0) {
                    selectedVariants.forEach(function (value) {
                        $orders.each(function (key, item) {
                            if (item.value === value) {
                                $(this).prop('checked', true);
                                activateCreateButton = true;
                            }
                        });
                    });
                }

                const $consignment = $('[name="add-to-package"]');
                if ($consignment.length > 0) {
                    selectedVariants.forEach(function (value) {
                        $consignment.each(function (key, item) {
                            if (item.value === value) {
                                $(this).prop('checked', true);
                                activateCreateButton = true;
                            }
                        });
                    });
                }

                if (activateCreateButton) {
                    $('.js-create-package').attr('disabled', false);
                }
            }
        }

        function setSelectedRow(checkbox, isSelected) {
            const row = checkbox.closest('tr');
            if (!row) {
                return;
            }

            row.classList[isSelected ? 'add' : 'remove']('is-selected');
        }
    },

    initPrepareSearchRadioGroup() {
        $('.js-search-radio-group-container label').on('click', function () {
            if (!$(this).hasClass('c-ui-search-radio-group-container__label--checked')) {
                $(this).addClass('c-ui-search-radio-group-container__label--checked');
                $(this).siblings('label').removeClass('c-ui-search-radio-group-container__label--checked');

            }
        })
    },


    initOnEndEvent() {
        $(document).triggerHandler('tableViewEnd');
    }
};

$(function () {
    window.TableView.init();
});



/*[PATH @digikala/supernova-digikala-marketplace/assets/local/js/controllers/consignmentController/indexAction.js]*/
const ConsignmentAction = {
    init: function () {
        this.selectedValues = 0;
        this.urlSelector = '';
        this.orderContainer = '.order-table-container';
        this.initSelect();
        this.initSwitch();
        this.initSearch();

        if (isModuleActive('marketplace_fix_create_package_process_ui')) {
            this.initFiltersManagement();
        }
    },

    data: {
        items: [],
    },

    initSelect: function () {
        const $value = $('.special-search').parent().find(' .c-ui-switch__value');
        const $total = $('.c-ui-paginator__total:first');

        if ($value.length > 0 && $total.length > 0) {
            $value.text($total.attr('data-rows'));
        }

        const selects = document.querySelectorAll('.c-ui-select--common');

        if (selects) {
            for (let i = 0, len = selects.length; i < len; i++) {
                setSelect2(selects[i]);
            }
        }

        function setSelect2(select)
        {
            const $select = $(select);
            const selectPlaceholder = $select.attr('placeholder');
            const hasSearch = $select.hasClass('c-ui-select--search');

            $select.select2({
                placeholder: selectPlaceholder,
                minimumResultsForSearch: hasSearch ? 0 : Infinity,
                language: window.Services.selectSearchLanguage
            }).data('select2').$dropdown.addClass('c-ui-select__dropdown c-ui-select__dropdown--gap');
        }
    },

    initSwitch: function () {
        const inputs = document.querySelectorAll('.js-order-switch-off');
        const submitBtn = document.getElementById('submitButton');

        if (inputs) {
            for (let i = 0, len = inputs.length; i < len; i++) {
                setSwitch(inputs[i]);
            }
        }

        function setSwitch(checkbox)
        {
            checkbox.addEventListener('click', toggleCheckbox);

            function toggleCheckbox()
            {
                for (let i = 0, len = inputs.length; i < len; i++) {
                    unsetOthersCheck(inputs[i]);
                }

                function unsetOthersCheck(item)
                {
                    if (
                        item !== checkbox
                        && item.name === checkbox.name
                        && item.checked
                    ) {
                        item.checked = false;
                    }
                }

                $(submitBtn).click();
            }
        }
    },

    initSearch: function () {
        let that = this;
        let digits = ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"];
        let submitBtn = document.getElementById('submitButton');
        let packageForm = document.getElementById('create-package-form');
        let searchField = document.getElementById('order-search');
        let variantIdField = document.getElementById('variant-ids');
        let clearForm = document.querySelector('#clearForm');

        if (!(submitBtn && searchField)) {
            return;
        }

        let isActive = submitBtn.disabled;

        submitBtn.addEventListener('click', preventSubmit);
        searchField.addEventListener('input', toggleActiveSubmit);
        $('#category-selector-field').on('select2:select', toggleActiveSubmit2);

        document.addEventListener('click', function (e) {
            if (e.target && e.target.classList.contains('js-create-package')) {
                goToPackagePage();
            }
        });

        function preventSubmit(e)
        {
            e.preventDefault();
        }

        let initialFormValues;
        let $clearForm;
        let $formInputs;

        if (clearForm) {
            initialFormValues = [];
            $clearForm = $(clearForm);
            $formInputs = $clearForm.closest('form').find('.js-form-clearable');

            $formInputs.each(collectInitialValues);
            $clearForm.on('click', clearFilterForm);
        }

        function collectInitialValues(_, input)
        {
            const $input = $(input);

            initialFormValues.push({
                input: $input,
                value: $input.val()
            });
        }

        function clearFilterForm(e)
        {
            e.preventDefault();
            console.log('hello world');
            let $switch = $('.selected-switch');
            $switch.attr('disabled', true);
            $switch.parent().find('.c-ui-switch__value').text(translate('0'));
            that.data.items = [];
            $('.special-search').prop('checked', true);

            $('[name="add-to-package"]').each(function (_, item) {
                if (item.checked) {
                    $(this).prop('checked', false);
                }
            });

            $('[name="search[selected-variants]"]').val('');

            initialFormValues.forEach(function (el) {
                el.input.val(el.value).trigger('change');
            });

            $(submitBtn).click();
            toggleActiveSubmit();
        }

        function goToPackagePage()
        {
            const hasWarehouses = $('input[name=has-warehouses]').val();
            if ( isModuleActive('marketplace_warehouse_setting_modal') ) {
                if (!hasWarehouses) {
                    const modal = window.UIkit.modal('#modal-warehouse-location', {
                        bgClose: true
                    });
                    modal.show();
                    $('.js-close-warehouse-location-modal').on('click', function () {
                        modal.hide();
                        if (!that.data.items.length) {
                            return;
                        }
                        variantIdField.value = that.data.items.toString();
                        packageForm.submit();
                    });
                } else {
                    if (!that.data.items.length) {
                        return;
                    }
                    variantIdField.value = that.data.items.toString();
                    packageForm.submit();
                }
            } else {
                if (!that.data.items.length) {
                    return;
                }
                variantIdField.value = that.data.items.toString();
                packageForm.submit();
            }
        }

        function translate(str)
        {
            if (!str) {
                return "";
            }

            return str.replace(/0|1|2|3|4|5|6|7|8|9/g, function (matched) {
                const index = parseInt(matched, 10);
                return digits[index];
            });
        }

        $(document).on('change', '[name="add-to-package"]', function () {
            const $this = $(this);
            let value = $this.val();

            if ($this.is(':checked')) {
                that.data.items = that.data.items.filter(function (elem) {
                    return elem != value;
                });

                that.data.items.push(value);
                that.selectedValues += 1;
            } else {
                that.data.items = that.data.items.filter(function (elem) {
                    return elem !== value;
                });
                that.selectedValues -= 1;
            }

            const hasSelectedValues = that.selectedValues <= 0;
            const $createPackageBtn = $('.js-create-package');
            const $selectedSwitch = $('.selected-switch');

            if (hasSelectedValues) {
                $selectedSwitch.attr('disabled', 'disabled');
                $createPackageBtn.attr('disabled', 'disabled');
                $('.all-checkbox').prop('checked', false);
                that.selectedValues = 0;
            } else {
                $selectedSwitch.attr('disabled', false);
                $createPackageBtn.attr('disabled', false);
            }
            checkTooltip($createPackageBtn, hasSelectedValues);
            $('[name="search[selected-variants]"]').val(that.data.items.toString());

            $selectedSwitch.parent().find('.c-ui-switch__value').text(translate(that.data.items.length.toString()));
        });

        $(document).on('change', '.all-checkbox', function () {
            let $checkboxes = $('[name="add-to-package"]');
            let number = $checkboxes.length;
            if (!number) {
                return;
            }
            let isCheckeboxesExist = number > 0;
            const isChecked = this.checked;
            let isCreateBtnDisabled = !isCheckeboxesExist || !isChecked;

            checkTooltip(
                $('.js-create-package').attr('disabled', isCreateBtnDisabled),
                !isChecked
            );

            $checkboxes.each(function (_, item) {
                that.data.items = that.data.items.filter(function (elem) {
                    return elem !== item.value;
                });

                if (isChecked) {
                    that.data.items.push(item.value);
                }
            });

            $('[name="search[selected-variants]"]').val(that.data.items.toString());
            const $selectedSwitch = $('.selected-switch');

            if (that.data.items.length <= 0) {
                $selectedSwitch.attr('disabled', 'disabled');
            } else {
                $selectedSwitch.attr('disabled', false);
            }

            $selectedSwitch.parent().find('.c-ui-switch__value').text(translate(that.data.items.length.toString()));
        });

        function toggleActiveSubmit()
        {
            const hasValue = !!searchField.value;
            submitBtn.disabled = !hasValue;
            clearForm.disabled = !hasValue;
            if (isActive !== submitBtn.disabled) {
                isActive = !hasValue;
            }
        }

        function toggleActiveSubmit2()
        {
            const hasValue = true;
            submitBtn.disabled = !hasValue;
            clearForm.disabled = !hasValue;
            if (isActive !== submitBtn.disabled) {
                isActive = !hasValue;
            }
        }

        function checkTooltip($btn, isBtnDisabled)
        {
            if (!($btn && $btn.length)) {
                return;
            }

            const $btnContainer = $btn.parent();
            const btnContainerTooltipText = $btnContainer.data('ui-back-tooltip') || $btnContainer.data('ui-tooltip');

            if (btnContainerTooltipText) {
                if (!isBtnDisabled) {
                    $btnContainer.removeAttr('data-ui-tooltip');
                    $btnContainer.data('ui-back-tooltip', btnContainerTooltipText);
                } else {
                    $btnContainer.removeData('ui-back-tooltip');
                    $btnContainer.attr('data-ui-tooltip', btnContainerTooltipText);
                }
            }
        }
    },

    initFiltersManagement() {
        const form = $('#searchForm');
        const filterBar = $('#searchFilterBar');

        // To handle addition of filters
        $('#submitButton')
            .on('click', function () {
                const formArray = form.serializeArray();
                const filters = [];

                ConsignmentAction.checkAndAddFilter(formArray, filters);
            })

        // To handle delete process of filters
        $('.js-remove-filter')
            .on('click', function (event, object) {
                const inputId = $(this).data('input-id');
                const inputEl = $('[name="'+ inputId + '"]');

                $(this).addClass('uk-hidden');

                if (!object) {
                    ConsignmentAction.setInputElementToDefaultVal(inputEl.eq(0));
                }

                if (filterBar.children().not('.uk-hidden').length === 1) {
                    filterBar.addClass('uk-hidden');
                }
            });

        $('.js-remove-all-filters').on('click', function () {
            filterBar.addClass('uk-hidden');
            // reset all filters
            $('.js-remove-filter').each(function () {
                $(this).addClass('uk-hidden');
                const inputId = $(this).data('input-id');
                const $inputEl = $('[name="'+ inputId + '"]');
                if ( $inputEl.length ) {
                    var element = $inputEl.eq(0);
                    if (element.prop('type') === 'checkbox') {
                        element.prop('checked', false);
                    } else if (element.prop('type') === 'radio') {
                        element.props('checked', false);
                    } else {
                        element.val('');
                        element.trigger('change');
                    }
                }
            });
            $('#submitButton').trigger('click');
        });
    },

    checkAndAddFilter: function(formArray, filters) {
        const textSearchSelectValPersian = $('select[name="search[type]"] option:selected').text();
        const filterBar = $('#searchFilterBar');

        // translate is actually the the label we need for filter
        const neededInformationForFilters = {
            'search[search-field]': {
                translate: textSearchSelectValPersian + ': ',
                idFirstPart: 'Text',
                inputId: '',
            },
            'search[shipping_nature_medium]': {
                translate: 'ماهیت کالایی ',
                idFirstPart: 'ShippingNatureMedium',
                inputId: '',
            },
            'search[shipping_nature_small]': {
                translate: 'ماهیت کالایی ',
                idFirstPart: 'ShippingNatureSmall',
                inputId: '',
            },
            'search[shipping_nature_large]': {
                translate: 'ماهیت کالایی ',
                idFirstPart: 'ShippingNatureLarge',
                inputId: '',
            },
            'search[all]': {
                translate: 'مشاهده:',
                idFirstPart: 'SeeAll',
                inputId: '',
            },


        }

        const persianTranslateForFilterValues = {
            all: ' ',
            '0': 'انتخاب شده ها',
            '1' : 'کوچک',
            '2' : 'بزرگ',
            '3' : 'متوسط',
            '': '',
        };

        filterBar.addClass('uk-hidden');
        $('[id*=searchFilter]').addClass('uk-hidden');

        $.each(formArray, function (i, item) {
            const itemInfo = neededInformationForFilters[item.name];
            if (itemInfo) {
                const filter = {
                    label: itemInfo.translate,
                    val: persianTranslateForFilterValues[item.value],
                    elementId: 'searchFilter' + itemInfo.idFirstPart,
                    inputId: item.name
                };
                if (!filter.val) {
                    filter.val = item.value;
                }
                if (item.name === 'search[all]') {
                    filter.val = item.value === '1' ?
                        persianTranslateForFilterValues['all'] : persianTranslateForFilterValues[item.value];
                }
                filters.push(filter);
            }
        })

        $.each(filters, function (i, item) {
            if (item.elementId && item.val !== '' && item.val !== ' ') {
                $('#' + item.elementId)
                    .data('input-id', item.inputId)
                    .removeClass('uk-hidden')
                    .find('div')
                    .text(item.label + item.val)

                ;
                filterBar.removeClass('uk-hidden');
            } else {
                $('#' + item.elementId).trigger('click', {dontCallAgain: true});
            }
        });
    },

    setInputElementToDefaultVal: function (element) {
        if (element.prop('type') === 'checkbox') {
            element.trigger('click');
        } else if (element.prop('type') === 'radio') {
            element.trigger('click');
        } else {
            element.val('');
            element.trigger('change');
            $('#submitButton').trigger('click');
        }
    }
};

$(function () {
    ConsignmentAction.init();
});